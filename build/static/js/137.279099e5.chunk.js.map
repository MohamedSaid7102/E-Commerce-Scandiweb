{"version":3,"file":"static/js/137.279099e5.chunk.js","mappings":"yRAQaA,EAAb,gMACEC,QAAU,SAACC,EAAKC,GAMd,OAAQA,GAASD,EAAM,MAAME,QAAQ,IAPzC,uCASE,WACE,MAMIC,KAAKC,MALPC,EADF,EACEA,eACAC,EAFF,EAEEA,UACAC,EAHF,EAGEA,iBACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,SAGIC,EAAYP,KAAKJ,QADD,GACwBS,GAGxCG,GAAcH,IAAcE,EAElC,OAAuB,IAAnBL,GAEA,iBAAKO,UAAU,YAAf,WACE,eAAIA,UAAU,gBAAd,mBACA,eAAIA,UAAU,cAAd,+BAIJ,iBAAKA,UAAU,YAAf,WACE,eAAIA,UAAU,gBAAd,mBAEA,eAAIA,UAAU,uBAAd,SACGN,EAAUO,KAAI,SAACC,EAAMC,GAAP,OACb,SAAC,IAAD,CAEEC,GAAIF,EAAKE,GACTC,KAAI,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAMG,KACZC,MAAOJ,EAAKI,MACZC,KAAML,EAAKK,KACXC,OAAOC,EAAAA,EAAAA,IAASP,EAAKQ,OAAQf,GAC7BgB,QAAST,EAAKS,QACdC,WAAYV,EAAKU,WACjBC,mBAAoBX,EAAKW,mBACzBC,IAAKZ,EAAKY,IACVC,wBAAwB,IAVf,OAAJb,QAAI,IAAJA,OAAA,EAAAA,EAAMG,OAAQF,SAczB,oBAAQH,UAAU,cAAlB,WACE,gBAAIA,UAAU,eAAd,WACE,kBAAMA,UAAU,cAAhB,iBApCc,GAoCd,QACCL,EAAiBqB,OACjBlB,MAEH,gBAAIE,UAAU,eAAd,WACE,iBAAMA,UAAU,cAAhB,uBACCH,MAEH,gBAAIG,UAAU,eAAd,WACE,iBAAMA,UAAU,cAAhB,oBAA4C,IAC3CL,EAAiBqB,OACjBjB,EAAWT,QAAQ,OAEtB,SAAC,KAAD,CACE2B,GAAG,YACHjB,UAAU,kCACVkB,QAAS,YACPC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,IAAc,GAAO,IALzB,iCAlEV,GAA0BC,EAAAA,WAyF1B,WAAeC,EAAAA,EAAAA,KARS,SAACC,GAAD,MAAY,CAClC9B,eAAgB8B,EAAMC,KAAK/B,eAC3BC,UAAW6B,EAAMC,KAAK9B,UACtBC,iBAAkB4B,EAAME,WAAW9B,iBACnCC,WAAY2B,EAAMC,KAAK5B,WACvBC,SAAU0B,EAAMC,KAAK/B,kBAGvB,CAAwCP","sources":["pages/Cart.jsx"],"sourcesContent":["import CartItem from 'components/common/dropdown/CartItem';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getPrice } from 'utils/utilityFunctions';\r\nimport { closeAllDropdowns } from 'Redux/ducks/dropdown';\r\nimport { setModalState } from 'Redux/ducks/modal';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport class Cart extends Component {\r\n  calcTax = (tax, total) => {\r\n    // if (typeof tax !== 'number' || typeof total !== 'number')\r\n    //   throw new Error(\r\n    //     'wrong passed parameters, tax or total, check calcTax function'\r\n    //   );\r\n\r\n    return (total * (tax / 100)).toFixed(2);\r\n  };\r\n  render() {\r\n    const {\r\n      cartItemsCount,\r\n      cartItems,\r\n      selectedCurrency,\r\n      totalPrice,\r\n      totalQty,\r\n    } = this.props;\r\n    const taxPercentage = 23; // in the future we can find a way to control this from outside of this component\r\n    const taxAmount = this.calcTax(taxPercentage, totalPrice);\r\n\r\n    // The '+' before the number to convert it to 'int' from 'string'\r\n    const finalPrice = +totalPrice + +taxAmount;\r\n\r\n    if (cartItemsCount === 0)\r\n      return (\r\n        <div className=\"cart-page\">\r\n          <h1 className=\"cart__heading\">Cart</h1>\r\n          <h2 className=\"cart--empty\">Cart is empty</h2>\r\n        </div>\r\n      );\r\n    return (\r\n      <div className=\"cart-page\">\r\n        <h1 className=\"cart__heading\">Cart</h1>\r\n        {/* Cart items */}\r\n        <ul className=\"cart__dropdown-items\">\r\n          {cartItems.map((item, index) => (\r\n            <CartItem\r\n              key={item?.uuid || index}\r\n              id={item.id}\r\n              uuid={item?.uuid}\r\n              brand={item.brand}\r\n              name={item.name}\r\n              price={getPrice(item.prices, selectedCurrency)}\r\n              gallery={item.gallery}\r\n              attributes={item.attributes}\r\n              selectedAttributes={item.selectedAttributes}\r\n              qty={item.qty}\r\n              disableAttributeChange={true}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <footer className=\"cart-footer\">\r\n          <h2 className=\"footer__item\">\r\n            <span className=\"item__title\">Tax {taxPercentage}%:</span>\r\n            {selectedCurrency.symbol}\r\n            {taxAmount}\r\n          </h2>\r\n          <h2 className=\"footer__item\">\r\n            <span className=\"item__title\">Quantity:</span>\r\n            {totalQty}\r\n          </h2>\r\n          <h2 className=\"footer__item\">\r\n            <span className=\"item__title\">Total:</span>{' '}\r\n            {selectedCurrency.symbol}\r\n            {finalPrice.toFixed(2)}\r\n          </h2>\r\n          <NavLink\r\n            to=\"/checkout\"\r\n            className=\"btn-reset btn--filled order-btn\"\r\n            onClick={() => {\r\n              closeAllDropdowns();\r\n              setModalState(false, false);\r\n            }}\r\n          >\r\n            Check out\r\n          </NavLink>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  cartItemsCount: state.cart.cartItemsCount,\r\n  cartItems: state.cart.cartItems,\r\n  selectedCurrency: state.currencies.selectedCurrency,\r\n  totalPrice: state.cart.totalPrice,\r\n  totalQty: state.cart.cartItemsCount,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Cart);\r\n"],"names":["Cart","calcTax","tax","total","toFixed","this","props","cartItemsCount","cartItems","selectedCurrency","totalPrice","totalQty","taxAmount","finalPrice","className","map","item","index","id","uuid","brand","name","price","getPrice","prices","gallery","attributes","selectedAttributes","qty","disableAttributeChange","symbol","to","onClick","closeAllDropdowns","setModalState","Component","connect","state","cart","currencies"],"sourceRoot":""}